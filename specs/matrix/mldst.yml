_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"

  templates:
    test_mload_a_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew}, maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilek}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilem}*{tilek}), ({eew} / 8), 0;
        .popsection

    test_mload_at_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew}, maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilem}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilem}*{tilek}), ({eew} / 8), 0;
        .popsection

    test_mload_b_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilen}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilek}*{tilen}), ({eew} / 8), 0;
        .popsection
    
    test_mload_bt_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilek}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilek}*{tilen}), ({eew} / 8), 0;
        .popsection


    test_mload_a_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew}, maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilek}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilem}*{tilek}), ({eew} / 8), 0;
        .popsection

    test_mload_at_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew}, maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilem}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilem}*{tilek}), ({eew} / 8), 0;
        .popsection

    test_mload_b_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilen}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilek}*{tilen}), ({eew} / 8), 0;
        .popsection

        
    test_mload_bt_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m tr0, (a1), a2

        msettypei a0, e{sew},maccq
        li a2, {tilek}*{eew}/8
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({tilek}*{tilen}), ({eew} / 8), 0;
        .popsection

    test_mload_c_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}

        ml{dim}e{eew}.m acc0, (a1), a2

        li a0, 0
        li a1, {tilem}*{eew}/8
        li a2, {tilen}*{eew}/8
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a2

        .pushsection .data, 1;
        .balign 4
      test_{num}_data:
        .fill ({tilem}*{tilen}), ({eew} / 8), 0;
        .popsection

    test_mload_ct_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}

        ml{dim}e{eew}.m acc0, (a1), a2

        li a0, 0
        li a1, {tilem}*{eew}/8
        li a2, {tilen}*{eew}/8
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a1

        .pushsection .data, 1;
        .balign 8
      test_{num}_data:
        .fill ({tilem}*{tilen}), ({eew} / 8), 0;
        .popsection

    test_mload_c_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m acc0, (a1), a2

        li a0, 0
        li a1, {tilem}*{eew}/8
        li a2, {tilen}*{eew}/8
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a2

        .pushsection .data, 1;
        .balign 8
      test_{num}_data:
        .fill ({tilem}*{tilen}), ({eew} / 8), 0;
        .popsection

    test_mload_ct_stride: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},maccq
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {stride}
        la a3, test_{num}_data

        ml{dim}e{eew}.m acc0, (a1), a2

        li a0, 0
        li a1, {tilem}*{eew}/8
        li a2, {tilen}*{eew}/8
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a1

        .pushsection .data, 1;
        .balign 8
      test_{num}_data:
        .fill ({tilem}*{tilen}), ({eew} / 8), 0;
        .popsection

    test_mstore_a_basic: |
      test_{num}:
        li TESTNUM, {num};
        li a1, {kmax} * {eew} / 8
        msettypei a0, e{eew},maccq
        msettileki a0, {kmax}
        msettilemi a0, {mlen} / {vlen}
        la a2, {rs1_data}
        mlae{eew}.m tr0, (a2), a1
        
        msettypei a0, e{eew},maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_mstore_a_stride: |
      test_{num}:
        li TESTNUM, {num};
        li a1, {kmax} * {eew} / 8
        msettypei a0, e{eew},maccq
        msettileki a0, {kmax}
        msettilemi a0, {mlen} / {vlen}
        la a2, {rs1_data}
        mlae{eew}.m tr0, (a2), a1
        
        msettypei a0, e{eew},maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_mstore_b_basic: |
      test_{num}:
        li TESTNUM, {num};
        li a1, {vlen} / 8
        msettypei a0, e{eew},maccq
        msettileki a0, {kmax}
        msettileni a0, {vlen} / {eew}
        la a2, {rs1_data}
        mlbe{eew}.m tr0, (a2), a1
        
        msettypei a0, e{eew},maccq
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

    

    test_mstore_b_stride: |
      test_{num}:
        li TESTNUM, {num};
        li a2, {vlen} / 8
        msettypei a0, e{sew},maccq
        msettileki a0, {vlen} / 8
        msettilemi a0, {mlen} / {vlen}
        msettileni a0, {vlen} / {sew}
        la a1, {rs1_data}
        ml{dim}e{eew}.m tr0, (a1), a2
        
        msettypei a0, e{eew},maccq
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m tr0, (a3), a2

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_mstore_c_basic: |
      test_{num}:
        li TESTNUM, {num};
        li a2, {vlen} * {eew} / 8 / {sew}
        msettypei a0, e{sew},maccq
        msettileni a0, {vlen} / {sew}
        msettilemi a0, {mlen} / {vlen}
        la a1, {rs1_data}
        mlce{eew}.m acc0, (a1), a2
        
        li a0, 0
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a2
        

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

    test_mstore_c_stride: |
      test_{num}:
        li TESTNUM, {num};
        li a2, {vlen} * {eew} / 8 / {sew}
        msettypei a0, e{sew},maccq
        msettileni a0, {vlen} / {sew}
        msettilemi a0, {mlen} / {vlen}
        la a1, {rs1_data}
        mlce{eew}.m acc0, (a1), a2
        
        li a0, 0
        msettilemi a0, {tilem}
        msettileni a0, {tilen}
        li a2, {stride}
        la a3, test_{num}_data
        ms{dim}e{eew}.m acc0, (a3), a2
        

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill (128*{stride}*8/{eew}), ({eew} / 8), 0;
        .popsection

  
  rule: co_verification      
  rule_params:
    test_mload_a_basic: np.array_equal(result, golden)
    test_mload_b_basic: np.array_equal(result, golden)
    test_mload_a_stride: np.array_equal(result, golden)
    test_mload_b_stride: np.array_equal(result, golden)
    test_mload_at_basic: np.array_equal(result, golden)
    test_mload_bt_basic: np.array_equal(result, golden)
    test_mload_at_stride: np.array_equal(result, golden)
    test_mload_bt_stride: np.array_equal(result, golden)
    test_mload_c_basic: np.array_equal(result, golden)
    test_mload_c_stride: np.array_equal(result, golden)
    test_mload_ct_basic: np.array_equal(result, golden)
    test_mload_ct_stride: np.array_equal(result, golden)
    test_mstore_a_basic: np.array_equal(result, golden)
    test_mstore_a_stride: np.array_equal(result, golden)
    test_mstore_b_basic: np.array_equal(result, golden)
    test_mstore_b_stride: np.array_equal(result, golden)
    test_mstore_c_basic: np.array_equal(result, golden)
    test_mstore_c_stride: np.array_equal(result, golden)
    

mle_test:
  <<: *default

  cases:
    test_mload_a_basic :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['a']
        sew: [8, 16]
        eew: sew
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)[0]
        rs1: get_mload_data(dim, eew, tilem, 0, tilek, stride)

    test_mload_at_basic :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['at']
        sew: [8, 16]
        eew: sew
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)[0]
        rs1: get_mload_data(dim, eew, tilem, 0, tilek, stride)

    test_mload_b_basic :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['b']
        sew: [8, 16]
        eew: sew
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0,  tilen, tilek)[0]
        rs1: get_mload_data(dim, eew, 0, tilen, tilek, stride)

    test_mload_bt_basic :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['bt']
        sew: [8, 16]
        eew: sew
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0,  tilen, tilek)[0]
        rs1: get_mload_data(dim, eew, 0, tilen, tilek, stride)

    test_mload_a_stride :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['a']
        sew: [8, 16]
        eew: sew
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)
        rs1: get_mload_data(dim, eew, tilem, 0, tilek, stride)

    test_mload_at_stride :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['at']
        sew: [8, 16]
        eew: sew
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)
        rs1: get_mload_data(dim, eew, tilem, 0, tilek, stride)

    test_mload_b_stride :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['b']
        sew: [8, 16]
        eew: sew
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0,  tilen, tilek)[0]
        rs1: get_mload_data(dim, eew, 0, tilen, tilek, stride)

    test_mload_bt_stride :
      matrix:
        mlen: mlen
        vlen: vlen
        dim: ['bt']
        sew: [8, 16]
        eew: sew
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0,  tilen, tilek)
        rs1: get_mload_data(dim, eew, 0, tilen, tilek, stride)

    test_mload_c_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["c"]
        mmv: get_acc_mmv(sew, eew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)[0]
        rs1: get_mload_data(dim, eew, tilem, tilen, 0, stride)

    test_mload_ct_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["ct"]
        mmv: get_acc_mmv(sew, eew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)[0]
        rs1: get_mload_data(dim, eew, tilem, tilen, 0, stride)

    test_mload_c_stride:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["c"]
        mmv: get_acc_mmv(sew, eew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)
        rs1: get_mload_data(dim, eew, tilem, tilen, 0, stride)

    test_mload_ct_stride:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["ct"]
        mmv: get_acc_mmv(sew, eew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)
        rs1: get_mload_data(dim, eew, tilem, tilen, 0, stride)


mse_test:
  <<: *default

  cases:
    test_mstore_a_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: sew
        dim: ["a", "at"]
        kmax: get_tile_max(mlen, vlen, "tilek", sew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)[0]
        rs1: get_mstore_data(dim, mlen//vlen, kmax, eew)


    test_mstore_a_stride:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: sew
        dim: ["a", "at"]
        kmax: get_tile_max(mlen, vlen, "tilek", sew)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, 0, tilek)[0]
        rs1: get_mstore_data(dim, mlen//vlen, kmax, eew)


    test_mstore_b_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: sew
        dim: ["b", "bt"]
        kmax: get_tile_max(mlen, vlen, "tilek", sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0, tilen, tilek)[0]
        rs1: get_mstore_data(dim, mlen//vlen, vlen//eew, eew)


    test_mstore_b_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: sew
        dim: ["b", "bt"]
        kmax: get_tile_max(mlen, vlen, "tilek", sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, 0, tilen, tilek)
        rs1: get_mstore_data(dim, mlen//vlen, vlen//eew, eew)


    test_mstore_c_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["c", "ct"]
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)[0]
        rs1: np.random.randint(2^eew, size=(mlen//vlen, vlen//sew), dtype=bits_to_dtype_int(eew))
    
    test_mstore_c_stride:
      matrix:
        mlen: mlen
        vlen: vlen
        sew: [8, 16, 32]
        eew: get_acc_load_eew(sew)
        dim: ["c", "ct"]
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        stride: get_mload_stride(dim, eew, tilem, tilen, 0)
        rs1: np.random.randint(2^eew, size=(mlen//vlen, vlen//sew), dtype=bits_to_dtype_int(eew))
