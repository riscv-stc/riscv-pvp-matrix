_: &default
  env: RVTEST_RV64UV
  head: |
    #include "exception.h"
    #include "test_macros.h"

  templates:
    test_mopa_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},false,false,maccd
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {tilek} * {sew} / 8
        la a3, {rs2_data}
        li a4, {tilen} * {sew} / 8

        mle{sew}.tr.r.a tr0, (a1), a2
        mle{sew}.tr.r.b tr1, (a3), a4

        {mopa}.mm acc0, tr0, tr1
        
        li a0, 0
        li a1, {tilen}
        li a2, {tilem}
        la a3, test_{num}_data
        vsetvli x0, a1, e{eew},m4,ta,ma
      test_{num}_loop:
        {mmv}.v.xa.r.n v8, acc0, a0
        vse{eew}.v v8, (a3)
        addi a0, a0, 1
        addi a3, a3, {vlen}*4/8
        bne a0, a2, test_{num}_loop

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({mlen}*4/{eew}), ({eew} / 8), 0;
        .popsection
  
    test_mfopa_basic: |
      test_{num}:
        li TESTNUM, {num};
        msettypei a0, e{sew},false,false,maccd
        msettilemi a0, {tilem}
        msettileki a0, {tilek}
        msettileni a0, {tilen}
        la a1, {rs1_data}
        li a2, {tilek} * {sew} / 8
        la a3, {rs2_data}
        li a4, {tilen} * {sew} / 8

        mle{sew}.tr.r.a tr0, (a1), a2
        mle{sew}.tr.r.b tr1, (a3), a4

        {mopa}.mm acc0, tr0, tr1
        
        li a0, 0
        li a1, {tilen}
        li a2, {tilem}
        la a3, test_{num}_data
        vsetvli x0, a1, e{eew},m4,ta,ma
      test_{num}_loop:
        {mfmv}.v.xa.r.n v8, acc0, a0
        vse{eew}.v v8, (a3)
        addi a0, a0, 1
        addi a3, a3, {vlen}*4/8
        bne a0, a2, test_{num}_loop

        .pushsection .data, 1;
        .balign 1
      test_{num}_data:
        .fill ({mlen}*4/{eew}), ({eew} / 8), 0;
        .popsection

  rule: co_verification      
  rule_params:
    test_mopa_basic: np.allclose( result, golden, rtol=1e-2, atol=2e-1, equal_nan=True)
    test_mfopa_basic: np.allclose( result, golden, rtol=1e-2, atol=2e-1, equal_nan=True)

mopa_test:
  <<: *default

  cases:
    test_mopa_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        mopa: ["mopa", "mwopa", "mqopa"]
        sew: [8]
        eew: get_mopa_eew(mopa, sew)
        mmv: get_mopa_mmv(mopa)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        rs1: get_mopa_src1(mopa, sew, tilem, tilek)
        rs2: get_mopa_src2(mopa, sew, tilek, tilen)

    test_mfopa_basic:
      matrix:
        mlen: mlen
        vlen: vlen
        mopa: ["mfopa", "mfwopa"]
        sew: 16
        eew: get_mopa_eew(mopa, sew)
        mfmv: get_mfopa_mmv(mopa)
        tilem: get_mload_len("tilem", mlen, vlen, sew)
        tilen: get_mload_len("tilen", mlen, vlen, sew)
        tilek: get_mload_len("tilek", mlen, vlen, sew)
        rs1: get_mopa_src1(mopa, sew, tilem, tilek)
        rs2: get_mopa_src2(mopa, sew, tilek, tilen)

   